{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "acrName": {
            "type": "string",
            "metadata": {
                "description": "Specify the name of the Azure Container Registry."
            }
        },
        "acrResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "The name of the resource group the container registry is associated with."
            }
        },
        "applicationGatewayName": {
            "type": "string",
            "metadata": {
                "description": "Name of Application Gateway that will be used as ingress controller."
            }
        },
        "authorizedIPRanges": {
            "type": "array",
            "metadata": {
                "description": "Boolean flag to turn on and off http application routing."
            }
        },
        "availabilityZones": {
            "type": "array",
            "metadata": {
                "description": "Enabled availability zones."
            }
        },
        "dnsPrefix": {
            "type": "string",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "dnsServiceIP": {
            "type": "string",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "dockerBridgeCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP for Docker bridge."
            }
        },
        "enableAzurePolicy": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Boolean flag to turn on and off Azure Policy addon."
            }
        },
        "enableHttpApplicationRouting": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off http application routing."
            }
        },
        "enablePrivateCluster": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Enable private network access to the Kubernetes cluster."
            }
        },
        "enableRBAC": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Boolean flag to turn on and off of RBAC."
            }
        },
        "guidValue": {
            "type": "string",
            "metadata": {
                "description": "The unique id used in the role assignment of the kubernetes service to the container registry service. It is recommended to use the default value."
            },
            "defaultValue": "[newGuid()]"
        },
        "kubernetesVersion": {
            "type": "string",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "maxPodsCount": {
            "type": "int",
            "metadata": {
                "description": "Maximum numbers of pods per nodes."
            }
        },
        "networkPlugin": {
            "type": "string",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "metadata": {
                "description": "Network plugin used for building Kubernetes network."
            }
        },
        "nodeResourceGroup": {
            "type": "string",
            "metadata": {
                "description": "Name of self managed AKS resource group"
            }
        },
        "osDiskSizeGB": {
            "type": "int",
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            },
            "minValue": 0,
            "maxValue": 1023
        },
        "resourceName": {
            "type": "string",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "serviceCidr": {
            "type": "string",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "subnetID": {
            "type": "string",
            "metadata": {
                "description": "Subnet ID value."
            }
        },
        "tags": {
            "type": "object",
            "metadata": {
                "description": "Setting the tags."
            }
        },
        "vmCount": {
            "type": "int",
            "metadata": {
                "description": "Number of virtual machines in default node pool."
            }
        },
        "vmSize": {
            "type": "string",
            "metadata": {
                "description": "Virtual Machine size."
            }
        },
        "vnetName": {
            "type": "string",
            "metadata": {
                "description": "Resource name of virtual network used for nodes and/or pods IP assignment."
            }
        },
        "vnetSubnetName": {
            "type": "string",
            "metadata": {
                "description": "Resource name of virtual network subnet used for nodes and/or pods IP assignment."
            }
        },
        "skuTier": {
            "type": "string",
            "metadata": {
                "description": "SLA uptime. (Paid or Free)"
            }
        },
        "osDiskType": {
            "type": "string",
            "metadata": {
                "description": "Disk type."
            }
        },
        "workspaceName": {
            "type": "string",
            "metadata": {
                "description": "Name of Workspace to be used on Insights"
            }
        },
        "containerInsightsEnabled": {
            "type": "bool",
            "metadata": {
                "description": "Specify if container insights is enabled"
            }
        },
        "adminGroupObjectIDs": {
            "type": "array",
            "metadata": {
                "description": "Group object ID of Administrator group"
            }
        }
    },
    "variables": {
        "applicationGatewayAssignment": "[concat(guid(resourceGroup().name, parameters('applicationGatewayName')))]",
        "subnetRoleAssignmentName": "[concat(parameters('vnetName'), '/', parameters('vnetSubnetName'), '/Microsoft.Authorization/', guid(concat(parameters('vnetName'), parameters('vnetSubnetName'))))]",
        "acrRoleAssignmentName": "[concat(parameters('acrName'), '/Microsoft.Authorization/', guid(concat(resourceGroup().name, parameters('acrName'))))]",
        "containerInsightsConfig": {
            "logAnalyticsWorkspaceResourceID": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]"
        }
    },
    "resources": [
        {
            "apiVersion": "2021-02-01",
            "dependsOn": [],
            "type": "Microsoft.ContainerService/managedClusters",
            "location": "[resourceGroup().location]",
            "name": "[parameters('resourceName')]",
            "sku": {
                "name": "Basic",
                "tier": "[parameters('skuTier')]"
            },
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "aadProfile": {
                    "adminGroupObjectIDs": "[parameters('adminGroupObjectIDs')]",
                    "managed": true
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": "[parameters('vmCount')]",
                        "enableAutoScaling": false,
                        "vmSize": "[parameters('vmSize')]",
                        "osType": "Linux",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "maxPods": "[parameters('maxPodsCount')]",
                        "availabilityZones": "[parameters('availabilityZones')]",
                        "vnetSubnetID": "[parameters('subnetID')]",
                        "osDiskType": "[parameters('osDiskType')]"
                    }
                ],
                "networkProfile": {
                    "loadBalancerSku": "standard",
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]",
                    "dockerBridgeCidr": "[parameters('dockerBridgeCidr')]"
                },
                "apiServerAccessProfile": {
                    "authorizedIPRanges": "[parameters('authorizedIPRanges')]",
                    "enablePrivateCluster": "[parameters('enablePrivateCluster')]"
                },
                "addonProfiles": {
                    "httpApplicationRouting": {
                        "enabled": "[parameters('enableHttpApplicationRouting')]"
                    },
                    "azurepolicy": {
                        "enabled": "[parameters('enableAzurePolicy')]"
                    },
                    "ingressApplicationGateway": {
                        "config": {
                            "applicationGatewayId": "[resourceId('Microsoft.Network/applicationGateways', parameters('applicationGatewayName'))]"
                        },
                        "enabled": true
                    },
                    "omsagent": {
                        "enabled": "[parameters('containerInsightsEnabled')]",
                        "config": "[if(parameters('containerInsightsEnabled'), variables('containerInsightsConfig'), createObject())]"
                    }
                },
                "nodeResourceGroup": "[parameters('nodeResourceGroup')]"
            },
            "tags": "[parameters('tags')]",
            "identity": {
                "type": "SystemAssigned"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "ClusterAcrRoleAssignmentDeployment",
            "apiVersion": "2017-05-10",
            "resourceGroup": "[parameters('acrResourceGroup')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "apiVersion": "2018-09-01-preview",
                            "type": "Microsoft.ContainerRegistry/registries/providers/roleAssignments",
                            "name": "[variables('acrRoleAssignmentName')]",
                            "properties": {
                                "principalId": "[reference(parameters('resourceName'), '2021-02-01').identityProfile.kubeletidentity.objectId]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                                "scope": "[resourceId(parameters('acrResourceGroup'),'Microsoft.ContainerRegistry/registries/', parameters('acrName'))]"
                            }
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets/providers/roleAssignments",
            "apiVersion": "2018-09-01-preview",
            "name": "[variables('subnetRoleAssignmentName')]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                "principalId": "[reference(parameters('resourceName'),'2021-02-01','Full').identity.principalId]",
                "scope": "[parameters('subnetID')]"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2020-04-01-preview",
            "name": "[variables('applicationGatewayAssignment')]",
            "properties": {
                "roleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                "principalId": "[reference(parameters('resourceName'),'2021-02-01','Full').properties.addonProfiles.ingressApplicationGateway.identity.objectId]",
                "scope": "[resourceGroup().id]"
            }
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "string",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}
