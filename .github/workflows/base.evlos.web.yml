name: Build and deploy web container to Azure Cloud

on:
  workflow_call:
    inputs:
      # Default inputs
      CONTAINER_REGISTRY_SERVER:
        default: evlosregistry.azurecr.io 
        type: string
        required: false
      DOCKERFILE_PATH:
        default: ./Dockerfile
        type: string
        required: false
      # Development inputs
      IMAGE_NAME_DEV:
        type: string
        required: true
      APP_SERVICE_NAME_DEV:
        type: string
        required: true
      # Homologation inputs
      IMAGE_NAME_HMG:
        type: string
        required: true 
      APP_SERVICE_NAME_HMG:
        type: string
        required: true
      # Production inputs
      DEPLOYMENT_SERVICE_PATH:
        type: string
        required: true
      AZURE_RESOURCE_GROUP_K8S:
        type: string
        required: true
      AZURE_CLUSTER_K8S:
        type: string
        required: true
      NAMESPACE_K8S:
        type: string
        required: true 
      DEPLOYMENT_K8S:
        type: string
        required: true 
      SERVICE_K8S: 
        type: string
        required: true 
      IMAGE_NAME_PRD:
        type: string
        required: true 
jobs:
  deploy-build-development:
    name: Deploy and build to development
    environment:
      name: development
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.event.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login no Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          login-server: ${{ inputs.CONTAINER_REGISTRY_SERVER }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.CONTAINER_REGISTRY_SERVER }}/${{ inputs.IMAGE_NAME_DEV }}:${{ github.sha }}
          file: ${{ inputs.DOCKERFILE_PATH }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.APP_SERVICE_NAME_DEV }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISH_PROFILE_DEV }}
          images: ${{ inputs.IMAGE_NAME_DEV }}:${{ github.sha }}

      # - name: Ping on Azure Web App Url
      #   run: |
      #     response=$(curl -s -o /dev/null -w "%{http_code}\n" ${{ steps.deploy-to-webapp.outputs.webapp-url }})
      #     if response != 200; then
      #       echo "Url response is $reponse"
      #       exit 1
      #     fi

  deploy-build-homologation:
    name: Deploy and build to homologation
    environment:
      name: homologation
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    if: github.event.ref == 'refs/heads/hmg'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login no Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          login-server: ${{ inputs.CONTAINER_REGISTRY_SERVER }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.CONTAINER_REGISTRY_SERVER }}/${{ inputs.IMAGE_NAME_HMG }}:${{ github.sha }}
          file: ${{ inputs.DOCKERFILE_PATH }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.APP_SERVICE_NAME_HMG }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISH_PROFILE_HMG }}
          images: ${{ inputs.IMAGE_NAME_HMG }}:${{ github.sha }}

      # - name: Ping on Azure Web App Url
      #   run: |
      #     response=$(curl -s -o /dev/null -w "%{http_code}\n" ${{ steps.deploy-to-webapp.outputs.webapp-url }})
      #     if response != 404; then
      #       echo "Url response is $reponse"
      #       exit 1
      #     fi

  deploy-build-production:
    name: Deploy and build to production
    environment:
      name: production
    if: github.event.ref == 'refs/heads/main' || github.event.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v2

      - name: Owner as an output variable
        uses: actions/github-script@v6
        id: owner
        with:
          script: |
            return context.repo.owner

      - name: Repo as an output variable
        uses: actions/github-script@v6
        id: repo
        with:
          script: |
            return context.repo.repo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login no Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}
          login-server: ${{ inputs.CONTAINER_REGISTRY_SERVER }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ inputs.CONTAINER_REGISTRY_SERVER }}/${{ inputs.IMAGE_NAME_PRD }}:${{ github.sha }}
          file: ${{ inputs.DOCKERFILE_PATH }}

      - name: Checkout devops_infrastructure_library repository
        uses: actions/checkout@v2
        with:
          repository: evlos4u/devops_infrastructure_library
          ref: main
          token: ${{ secrets.EVLOS_ACCESS_TOKEN }}

      - name: Get Ip cluster
        shell: bash
        run: echo "RUNNER_IP=$(curl https://api.ipify.org)" >> $GITHUB_ENV

      - name: Logging in Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_SUBSCRIPTION1 }}

      - name: Add runner Ip on cluster
        shell: pwsh
        run: |
          [system.collections.arrayList]$currentIps=@($(az aks show -n ${{ inputs.AZURE_CLUSTER_K8S }} -g ${{ inputs.AZURE_RESOURCE_GROUP_K8S }} --query apiServerAccessProfile.authorizedIpRanges -o tsv))
          $currentIps.add("${{ env.RUNNER_IP }}")
          $newIps=$currentIps -join ","
          az aks update -n ${{ inputs.AZURE_CLUSTER_K8S }} -g ${{ inputs.AZURE_RESOURCE_GROUP_K8S }} --api-server-authorized-ip-ranges $newIps

      - name: Azure Kubernetes Service - Connecting to the cluster
        uses: Azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_SUBSCRIPTION1 }}
          resource-group: ${{ inputs.AZURE_RESOURCE_GROUP_K8S }}
          cluster-name: ${{ inputs.AZURE_CLUSTER_K8S }}

      - name: Azure Kubernetes Service - Creating namespace
        run: 
          kubectl create namespace ${{ inputs.NAMESPACE_K8S }}
        continue-on-error: true

      - name: Azure Kubernetes Service - Deployment de Web App
        run: |
          filename=${{ inputs.DEPLOYMENT_SERVICE_PATH }}    
          sed -i "s|IMAGE_NAME|${{ inputs.IMAGE_NAME_PRD }}|" $filename
          sed -i "s|latest|${{ github.sha }}|" $filename
          sed -i "s|DEPLOYMENT_K8S|${{ inputs.DEPLOYMENT_K8S }}|" $filename
          sed -i "s|SERVICE_K8S|${{ inputs.SERVICE_K8S }}|" $filename
          kubectl apply -n ${{ inputs.NAMESPACE_K8S }} -f $filename;
          
      - name: Azure Kubernetes Service - Checking Deployment Status and Rollback if Deployment fail
        run: |
          if ! kubectl rollout status deployment ${{ inputs.DEPLOYMENT_K8S }} -n ${{ inputs.NAMESPACE_K8S }}; then
            list_pods_failed=$(kubectl get pods -n ${{ inputs.NAMESPACE_K8S }} | grep -Ev '([0-9]+)/\1')
            string_pods_failed=""
            for str in ${list_pods_failed[@]}; do 
              if [[ "$str" = *${{ inputs.DEPLOYMENT_K8S }}* ]]; then 
                string_pods_failed+=$str
                string_pods_failed+=" "
              fi;
            done
            kubectl describe pods $string_pods_failed -n ${{ inputs.NAMESPACE_K8S }}
            kubectl rollout undo deployment ${{ inputs.DEPLOYMENT_K8S }} -n ${{ inputs.NAMESPACE_K8S }};
            kubectl rollout status deployment ${{ inputs.DEPLOYMENT_K8S }} -n ${{ inputs.NAMESPACE_K8S }};
            exit 1
          fi

      - name: Creating Release Notes        
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const last_tag_json = await github.request('GET /repos/{owner}/{repo}/releases/latest', {
                owner: ${{ steps.owner.outputs.result }},
                repo: ${{steps.repo.outputs.result}}
              })
              const last_tag_array = last_tag_json.data.tag_name.split('')
              last_tag_array.shift()
              const last_tag_number = last_tag_array.join('') 
              const release = await github.request('POST /repos/{owner}/{repo}/releases', {
                owner: ${{ steps.owner.outputs.result }},
                repo: ${{steps.repo.outputs.result}},
                tag_name: 'v'+ (parseFloat(last_tag_number) + parseFloat("0.1")).toFixed(1),
                name: 'v'+ (parseFloat(last_tag_number) + parseFloat("0.1")).toFixed(1),
                target_commitish: 'main',
                generate_release_notes: true
              })
              const release_note = await github.request('POST /repos/{owner}/{repo}/releases/generate-notes', {
                owner: ${{ steps.owner.outputs.result }},
                repo: ${{steps.repo.outputs.result}},
                tag_name: 'v'+ (parseFloat(last_tag_number) + parseFloat("0.1")).toFixed(1),
                target_commitish: 'main',
                previous_tag_name: 'v'+ (parseFloat(last_tag_number)).toFixed(1),
              })
            }
            catch(error) {
              await github.request('POST /repos/{owner}/{repo}/releases', {
                owner: ${{ steps.owner.outputs.result }},
                repo: ${{steps.repo.outputs.result}},      
                tag_name: 'v1.0',
                name: 'v1.0',
                target_commitish: 'main',
                generate_release_notes: true
              }) 
              await github.request('POST /repos/{owner}/{repo}/releases/generate-notes', {
                owner: ${{ steps.owner.outputs.result }},
                repo: ${{steps.repo.outputs.result}},      
                tag_name: 'v1.0',
                target_commitish: 'main',
                previous_tag_name: 'v1.0',
              })      
            }

      - name: Remove runner Ip on cluster
        shell: pwsh
        run: |
          [system.collections.arrayList]$currentIps=@($(az aks show -n ${{ inputs.AZURE_CLUSTER_K8S }} -g ${{ inputs.AZURE_RESOURCE_GROUP_K8S }} --query apiServerAccessProfile.authorizedIpRanges -o tsv))
          $currentIps.remove("${{ env.RUNNER_IP }}/32")
          $newIps=$currentIps -join ","
          az aks update -n ${{ inputs.AZURE_CLUSTER_K8S }} -g ${{ inputs.AZURE_RESOURCE_GROUP_K8S }} --api-server-authorized-ip-ranges $newIps